#. [helloworld]
#. tests: "calling procedures"
#. expect_output: "Hello, world!"

output("Hello, world!")


#. [variables.global]
#. tests: "declaring global variables"
#. expect_output: """
#.   10
#.   20
#. """

var a = 10
var b = 20
output(a)
output(b)


#. [variables.local]
#. tests: "nested `block` construct, declaring local variables"
#. expect_output: """
#.   10
#.   20
#.   30
#. """

block
  var a = 10
  output(a)
  block
    var b = 20
    output(b)
  var c = 30
  output(c)


#. [block.statement]
#. tests: "`block` as a statement"
#. expect_output: "10"

block
  var x = 10
  output(x)


#. [block.expression]
#. tests: "`block` as an expression"
#. expect_output: "15"

var a = block
  var b = 30
  b / 2

output(a)


#.before

object Test = _

impl Test
  proc test
    output("in test")
  end
  proc inside
    output("in inside") # gosh i really need to implement line sensitivity
    .test()
  end
  proc set=(x)
    output("in set=")
  end
  proc %
    output("in %(_)")
  end
  proc %(b)
    output("in %(_, _)")
  end
end

var t = Test { _ = nil };

#. [method.syntax_nkCall]
#. tests: "calling methods via the `a.b()` syntax"
#. expect_output: "in test"

t.test()

#. [method.syntax_nkDot]
#. tests: "calling methods via the `a.b` syntax"
#. expect_output: "in test"

t.test

#. [method.syntax_nkInfix_assignment]
#. tests: "calling methods via the `a.b = c` assignment syntax"
#. expect_output: "in set="

t.set = 1

#. [method.syntax_nkCall_nkMember]
#. tests: "calling methods via the `.a(b)` syntax"
#. expect_output: """
#.   in inside
#.   in test
#. """

t.inside()

#. [method.syntax_nkPrefix]
#. tests: "calling methods via the `!a` syntax"
#. expect_output: "in %(_)"

%t

#. [method.syntax_nkInfix]
#. tests: "calling methods via the `a ! b` syntax"
#. expect_output: "in %(_, _)"

t % 1

#.before off


#. [if]
#. tests: "basic `if` statement"
#. expect_output: "yes"

var a = true

if a
  output("yes")
end

#. [if.else]
#. tests: "`if…else` statement"
#. expect_output: "yes"

var a = true

if a
  output("yes")
else
  output("no")
end

#. [if.elif_else]
#. tests: "`if…else…elif` statement"
#. expect_output: "maybe"

var a = false
var b = true

if a
  output("yes")
elif b
  output("maybe")
else
  output("no")
end

#. [if.expression]
#. tests: "`if` as an expression"
#. expect_output: "negative"

var i = -2
var kind =
  if   i < 0  "negative"
  elif i == 0 "zero"
  else        "positive"
  end

output(kind)

#. [if.expression.scope]
#. tests: "`if` expressions with scope"
#. expect_output: "123"

var a = 1
output(
  if a == 1
    var r = 61.5
    r * 2
  else
    var b = 32
    b / 2
  end
)

#. [while]
#. tests: "`while` loop, stdlib arithmetic"
#. expect_output: """
#.   1
#.   2
#.   3
#.   4
#.   5
#. """

var i = 1
while i <= 5
  output(i)
  i = i + 1
end


#. [for.countup]
#. tests: "`for` loop, stdlib Countup iterator"
#. expect_output: """
#.   1
#.   2
#.   3
#.   4
#.   5
#. """

for i in 1..5
  output(i)
end

#. [for.emulated]
#. tests: "`for` loop emulated with a `while` loop"
#. expect_output: """
#.   1
#.   2
#.   3
#.   4
#.   5
#. """

block
  var iter = (1..5)._iterate
  var i = nil
  while iter._hasNext
    i = iter._next
    output(i)
  end


#. [controlflow.break]
#. tests: "`break` statements, interaction between `break` and variables in scope"
#. expect_output: ""

var a = 0
while true
  var x = a + 10
  var y = x + 20
  a = a + 1
  if a == 10
    var z = 10 + y
    break
  end
end

#. [controlflow.continue]
#. tests: "`continue` statements, its interaction between variables in scope"
#. expect_output: """
#.   1
#.   2
#.   4
#.   5
#. """

for a in 1..5
  var x = 1
  if a == 3
    var z = 20
    continue
  end
  output(a)
end


#. [proc.simple]
#. tests: "procedure definition without parameters, calling user-defined procs"
#. expect_output: "hello"

proc hello
  output("hello")
end

hello()

#. [proc.recursive_fib]
#. tests: "shorthand procedure declaration with parameters, recursive calls"
#. expect_output: "55"

proc fib(n) =>
  if   n == 0  0
  elif n == 1  1
  else         fib(n - 1) + fib(n - 2)
  end

output(fib(10))

#. [proc.return]
#. tests: "returning from procedures"
#. expect_output: "41"

proc loop(x)
  var i = x
  while true
    if x >= 10
      return x + 10
    end
    x = x + 3
  end
end

output(loop(31))

#. [proc.result]
#. tests: "implicit `result` variable"
#. expect_output: "3628800"

proc fac(n)
  result = 1
  for i in 1..n
    result = result * i
  end
end

output(fac(10))


#. [objects.decl_constr]
#. tests: "object declaration and construction"
#. expect_output: "<object>"

object Vec2 = x, y

var v = Vec2 { x = 1, y = 2 }
output(v)

#. [objects.impl]
#. tests: "`impl` blocks, calling bytecode methods"
#. expect_output: """
#.   1
#.   2
#.   3
#.   4
#.   5
#. """

object Counter = i

impl Counter

  proc count()
    .i = .i + 1
  end

  proc value => .i

end

proc newCounter(initialValue) =>
  Counter { i = initialValue }

var c = newCounter(1)
output(c.value)

while c.value < 5
  c.count()
  output(c.value)
end
